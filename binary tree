import java.util.*;
class Main{
    static class TreeNode{
        int data;
        TreeNode left,right;
        TreeNode(int value){
            data=value;
            left=right=null;

    }
    public static int height(TreeNode root){
            if(root==null) return 0;
            int leftHeight=height(root.left);
            int rightHeight=height(root.right);
            return Math.max(leftHeight,rightHeight)+1;
    }
    public static void inOrder(TreeNode root) {
        if(root == null) return;
        inOrder(root.left);
        System.out.print( root.data +" ");
        inOrder(root.right);

    }
    public static int count(TreeNode root){
        if(root==null) return 0;
        return count(root.left)+count(root.right)+1;
    }
    public static boolean search (TreeNode root,int k){
            if(root==null) return false;
            if(root.data==k) return true;
            return search(root.left,k) || search(root.right,k);
    }
    public static void printlevels(TreeNode root,int k){
            if(root==null) return ;
            if(k==1){
                System.out.println(root.data+" ");
            }
            else{
                printlevels(root.left,k-1);
                printlevels(root.right,k+1);
            }
    }
    public static int findMax(TreeNode root){
            if(root==null) return Integer.MIN_VALUE;
            int leftMax=findMax(root.left);
            int rightMax=findMax(root.right);
            return Math.max(root.data,Math.max(leftMax,rightMax));
    }
    public static int countlevels(TreeNode root){
            if(root==null) return 0;
            if(root.left==null &&root.right==null) return 1;
            return countlevels(root.left) + countlevels(root.right);
    }
        public static int countNodes(TreeNode root){
            if(root==null) return 0;
            return countNodes(root.left)+countNodes(root.right)+root.data;
        }
        public static void traversalPostOrder(TreeNode root){
            if(root==null) return;
            traversalPostOrder(root.left);
            traversalPostOrder(root.right);
            System.out.print(root.data+" ");
        }
        public static boolean insertNode(TreeNode root,int k){
            if(root==null) return false;
            if(root.left==null){
                root.left=new TreeNode(k);
                return true;
            }
            if(root.right==null){
                root.right=new TreeNode(k);
                return true;
            }
            if(insertNode(root.left,k)) return true;
            return insertNode(root.right,k);
        }
        public static void print(TreeNode root){
            if(root==null) return;
            System.out.print(root.data+" ");
            print(root.left);
            print(root.right);
        }
    public static void main(String args[]) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);
        root.left.left.left = new TreeNode(8);
            root.left.left.right = new TreeNode(9);
        root.left.right.left = new TreeNode(10);
        root.right.left.left = new TreeNode(11);
        root.right.left.right = new TreeNode(12);
        root.left.right.right = new TreeNode(13);
        root.right.right.left = new TreeNode(14);
        root.right.right.right = new TreeNode(15);
        System.out.println("height:"+height(root));
        System.out.print("inorder:");
        inOrder(root);
        System.out.println();
        System.out.println("Tree Node: " + TreeNode.count(root));
        System.out.println("is 2 is present: " + search(root,2));
        System.out.println("is 17 is present: " + search(root,17));
        System.out.println("nodes at level2:");
        printlevels(root,2);
        System.out.println("maximum value is tree:" +findMax(root));
        System.out.println("no of leaf in binary tree:" +countlevels(root));
        System.out.println("sum of nodes:"+TreeNode.countNodes(root));
        System.out.print("post order traversal :" );
        traversalPostOrder(root);
        System.out.println();
        System.out.println("Insert node:"+insertNode(root,16));
        System.out.println("tree all nodes of tree:");
        print(root);

    }
    }
}
